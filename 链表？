//链表收尾//有BUG，不知道为什么，有时间让AI改一改！//航哥40集？有什么BUG？
typedef struct Node
{
	int val;
	struct Node* next;
	struct Node* random;
}Node;
struct Node* copyRandomList(struct Node* head)
{
	struct Node* cur = head;
	while (cur)
	{
		struct Node* copy = (struct Node*)malloc(sizeof(struct Node));
		copy->val = cur->val;
		copy->next = cur->next;
		cur->next = copy;
		cur = copy->next;
	}
	cur = head;
	while (cur)
	{
		struct Node* copy = cur->next;
		if (cur->random == NULL)
		{
			copy->random = NULL;
		}
		else
		{
			copy->random = cur->random->next;
		}
		cur = copy->next;
	}
	struct Node* copyHead = NULL, * copyTail = NULL;
	cur = head;
	while (cur)
	{
		struct Node* copy = cur->next;
		struct Node* next = copy->next;
		if (copyTail == NULL)
		{
			copyHead = copyTail = copy;
		}
		else
		{
			copyTail->next = copy;
			copyTail = copy;
		}
		cur->next = next;
		cur = next;
	}
	return copyHead;
}
//void ListPrint(Node* phead)
//{
//	Node* cur = phead;
//	while (cur != NULL)
//	{
//		printf("%d->", cur->val);
//		printf("%d->", cur->random);
//		printf("%d->", cur->random->val);
//		cur = cur->next;
//	}
//	printf("NULL\n");
//}
void ListPrint(Node* phead)
{
	Node* cur = phead;
	while (cur != NULL)
	{
		printf("[%d->", cur);
		printf("%d->", cur->val);
		if (cur->random != NULL)
		{
			printf("%d->", cur->random);
			printf("%d]\n", cur->random->val);
		}
		else
		{
			printf("NULL->NULL]\n");
		}
		cur = cur->next;
	}
	//printf("NULL]\n");
}
int main()
{
	struct Node* n1 = (struct Node*)malloc(sizeof(struct Node));
	struct Node* n2 = (struct Node*)malloc(sizeof(struct Node));
	struct Node* n3 = (struct Node*)malloc(sizeof(struct Node));
	struct Node* n4 = (struct Node*)malloc(sizeof(struct Node));
	n1->val = 1;
	n2->val = 2;
	n3->val = 3;
	n4->val = 4;
	n1->next = n2;
	n2->next = n3;
	n3->next = n4;
	n4->next = NULL;
	n1->random = n4;
	n2->random = NULL;
	n3->random = n1;
	n4->random = n2;
	struct Node* A = copyRandomList(n1);
	ListPrint(A);
	return 0;
}
