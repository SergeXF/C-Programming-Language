//关于二分查找法的时间复杂度和空间复杂度

//给定N个整数的序列{A1, A2, ..., AN}，求函数f(i, j) = max{ 0,j∑(k=i) Ak }的最大值
//算法1，时间T(N)=O(N^3)
int MaxSubseqSum1(int A[], int N)
{
	int ThisSum, MaxSum = 0;
	int i, j, k;
	for (i = 0; i < N; i++)
	{
		for (j = i; j < N; j++)
		{
			ThisSum = 0;
			for (k = i; k <= j; k++)
			{
				ThisSum += A[k];
			}
			if (ThisSum > MaxSum)
			{
				MaxSum = ThisSum;
			}
		}
	}
	return MaxSum;
}

//算法2，时间T(N)=O(N^2)——————当时间为O(n^2)时，就应该下意识改进为NlogN！！！！！
int MaxSubseqSum2(int A[], int N)
{
	int ThisSum, MaxSum = 0;
	int i, j;
	for (i = 0; i < N; i++)
	{
		ThisSum = 0;
		for (j = i; j < N; j++)
		{
			ThisSum += A[j];
			if (ThisSum > MaxSum)
				MaxSum = ThisSum;
		}
	}
	return MaxSum;
}

//算法3.1，时间T(N)=O(NlogN)，分而治之，多次二分，直至每组只有两个数字，比较每组的数字，重复比较每组分界线两侧的数字的他们各自的和，最大值相加即为跨越边界的最大子列和
//时间T(N)=2T(N/2)+cN
//		=2[2T(N/2^2)+cN/2]+cN
//		=2^kO(1)+ckN，其中N/2^K=1
//		=O(NlogN)
//空间复杂度是多少？？？？？？？？？？

//算法4，时间T(N)=O(N)，在线处理
int MaxSubseqSum4(int A[], int N)
{
	int ThisSum, MaxSum;
	int i;
	ThisSum = MaxSum = 0;
	for (i = 0; i < N; i++)
	{
		ThisSum += A[i];//向右累加
		if (ThisSum > MaxSum)
		{
			MaxSum = ThisSum;//发现更大和就更新当前结果
		}
		else if (ThisSum < 0)//如果当前子列和为负
		{
			ThisSum = 0;//就不可能使后面的部分和增大，应该抛弃
		}
	}
	return MaxSum;
}

//算法3.2，分治法
int Max3_2(int A, int B, int C)
{ // 返回3个整数中的最大值
	return A > B ? (A > C ? A : C) : (B > C ? B : C);
}
int DivideAndConquer3_2(int List[], int left, int right)
{ // 分治法求List[left]到List[right]的最大子列和
	int MaxLeftSum, MaxRightSum; // 存放左右子问题的解
	int MaxLeftBorderSum, MaxRightBorderSum; // 存放跨分界线的结果
	int LeftBorderSum, RightBorderSum;
	int center, i;

	if (left == right)
	{ // 递归的终止条件，子列只有1个数字
		return List[left] > 0 ? List[left] : 0;
	}

	// 下面是"分"的过程
	center = (left + right) / 2; // 找到中分点

	// 递归求得两边子列的最大和
	MaxLeftSum = DivideAndConquer3_2(List, left, center);
	MaxRightSum = DivideAndConquer3_2(List, center + 1, right);

	// 下面求跨分界线的最大子列和
	MaxLeftBorderSum = 0; LeftBorderSum = 0;
	for (i = center; i >= left; i--)
	{ // 从中线向左扫描
		LeftBorderSum += List[i];
		if (LeftBorderSum > MaxLeftBorderSum)
			MaxLeftBorderSum = LeftBorderSum;
	} // 左边扫描结束

	MaxRightBorderSum = 0; RightBorderSum = 0;
	for (i = center + 1; i <= right; i++)
	{ // 从中线向右扫描
		RightBorderSum += List[i];
		if (RightBorderSum > MaxRightBorderSum)
			MaxRightBorderSum = RightBorderSum;
	} // 右边扫描结束

	// 下面返回"治"的结果
	return Max3_2(MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum);
}
int MaxSubseqSum3_2(int List[], int N)
{ // 保持与前2种算法相同的函数接口
	return DivideAndConquer3_2(List, 0, N - 1);
}
int main()
{
	int arr[10] = { 5,-6,-8,-5,6,8,2,-1,9,1 };
	int A = MaxSubseqSum1(arr, 10);
	int B = MaxSubseqSum2(arr, 10);
	//int C = MaxSubseqSum3(arr, 10);
	int D = MaxSubseqSum3_2(arr, 10);
	int E = MaxSubseqSum4(arr, 10);
	printf("最大子列和是A=%d B=%d D=%d E=%d", A, B, D, E);//并没有实现打印最大子列的具体数字。
	return 0;
}
