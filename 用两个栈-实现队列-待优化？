//用两个栈实现队列？
#pragma once
typedef int StackDataType;
//#define N 10//静态结构
//typedef struct Stack
//{
//	StackDataType _a[N];
//	int _top;
//}Stack;
typedef struct Stack
{
	StackDataType* a;
	int top;
	int capacity;
}Stack;
void StackInit(Stack* ps);
void StackDestroy(Stack* ps);
void StackPush(Stack* ps, StackDataType x);
void StackPop(Stack* ps);
StackDataType StackTop(Stack* ps);
int StackSize(Stack* ps);
bool StackEmpty(Stack* ps);
void StackInit(Stack* ps)
{
	assert(ps);
	ps->a = NULL;
	ps->top = 0;//初始化时，0，意味着top指向栈顶数据的下一个//初始化时，-1，意味着top指向栈顶数据
	ps->capacity = 0;
}
void StackPush(Stack* ps, StackDataType x)
{
	assert(ps);
	if (ps->top == ps->capacity)
	{
		int newCapacity = ps->capacity == 0 ? 4 : ps->capacity * 2;
		StackDataType* tmp = realloc(ps->a, sizeof(StackDataType)*newCapacity);
		if (tmp == NULL)
		{
			printf("realloc fail\n");
			exit(-1);
		}
		ps->a = tmp;
		ps->capacity = newCapacity;
	}
	ps->a[ps->top] = x;
	ps->top++;
}
void StackDestroy(Stack* ps)
{
	assert(ps);
	free(ps->a);
	ps->a = NULL;
	ps->capacity = ps->top = 0;
}
void StackPop(Stack* ps)
{
	assert(ps);
	assert(!StackEmpty(ps));
	ps->top--;
}
StackDataType StackTop(Stack* ps)
{
	assert(ps);
	assert(!StackEmpty(ps));
	//assert(ps->top > 0);
	return ps->a[ps->top - 1];
}
int StackSize(Stack* ps)
{
	assert(ps);
	return ps->top;
}
bool StackEmpty(Stack* ps)
{
	assert(ps);
	//if (ps->top > 0)
	//{
	//	return true;
	//}
	//else
	//{
	//	return false;
	//}
	return ps->top == 0;
}
typedef struct MyQueue
{
	Stack pushST;
	Stack popST;
}MyQueue;


MyQueue* myQueueCreate() 
{
	MyQueue* q = (MyQueue*)malloc(sizeof(MyQueue));
	StackInit(&q->pushST);
	StackInit(&q->popST);
	return q;
}
void myQueuePush(MyQueue* obj, int x) 
{
	StackPush(&obj->pushST, x);
}
int myQueuePop(MyQueue* obj) 
{
	if (StackEmpty(&obj->popST))
	{
		while (!StackEmpty(&obj->pushST))
		{
			StackPush(&obj->popST, StackTop(&obj->pushST));
			StackPop(&obj->pushST);
		}
	}
	int front = StackTop(&obj->popST);
	StackPop(&obj->popST);
	return front;
}
int myQueuePeek(MyQueue* obj) 
{
	if (StackEmpty(&obj->popST))
	{
		while (StackEmpty(&obj->pushST))
		{
			StackPush(&obj->popST, StackTop(&obj->pushST));
			StackPop(&obj->pushST);
		}
	}
	return StackTop(&obj->popST);
}
bool myQueueEmpty(MyQueue* obj) 
{
	return StackEmpty(&obj->pushST) && StackEmpty(&obj->popST);
}
void myQueueFree(MyQueue* obj) 
{
	StackDestroy(&obj->pushST);
	StackDestroy(&obj->popST);
	free(obj);
}
int main()
{
	return 0;
}
