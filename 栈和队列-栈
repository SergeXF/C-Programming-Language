//栈与队列//栈
#pragma once
typedef int StackDataType;
//#define N 10//静态结构
//typedef struct Stack
//{
//	StackDataType _a[N];
//	int _top;
//}Stack;
typedef struct Stack
{
	StackDataType* a;
	int top;
	int capacity;
}Stack;
void StackInit(Stack* ps);
void StackDestroy(Stack* ps);
void StackPush(Stack* ps, StackDataType x);
void StackPop(Stack* ps);
StackDataType StackTop(Stack* ps);
int StackSize(Stack* ps);
bool StackEmpty(Stack* ps);
void StackInit(Stack* ps)
{
	assert(ps);
	ps->a = NULL;
	ps->top = 0;//初始化时，0，意味着top指向栈顶数据的下一个//初始化时，-1，意味着top指向栈顶数据
	ps->capacity = 0;
}
void StackPush(Stack* ps, StackDataType x)
{
	assert(ps);
	if (ps->top == ps->capacity)
	{
		int newCapacity = ps->capacity == 0 ? 4 : ps->capacity * 2;
		StackDataType* tmp = realloc(ps->a, sizeof(StackDataType)*newCapacity);
		if (tmp == NULL)
		{
			printf("realloc fail\n");
			exit(-1);
		}
		ps->a = tmp;
		ps->capacity = newCapacity;
	}
	ps->a[ps->top] = x;
	ps->top++;
}
void StackDestroy(Stack* ps)
{
	assert(ps);
	free(ps->a);
	ps->a = NULL;
	ps->capacity = ps->top = 0;
}
void StackPop(Stack* ps)
{
	assert(ps);
	assert(!StackEmpty(ps));
	ps->top--;
}
StackDataType StackTop(Stack* ps)
{
	assert(ps);
	assert(!StackEmpty(ps));
	//assert(ps->top > 0);
	return ps->a[ps->top - 1];
}
int StackSize(Stack* ps)
{
	assert(ps);
	return ps->top;
}
bool StackEmpty(Stack* ps)
{
	assert(ps);
	//if (ps->top > 0)
	//{
	//	return true;
	//}
	//else
	//{
	//	return false;
	//}
	return ps->top == 0;
}
int main()
{
	Stack st;
	StackInit(&st);
	//StackPush(&st, 1);
	//StackPush(&st, 2);
	//StackPush(&st, 3);
	//StackPush(&st, 4);
	//StackPop(&st);
	//StackPop(&st);
	//StackPop(&st);
	//StackPop(&st);
	//printf("%d", StackTop(&st));
	StackPush(&st, 1);
	StackPush(&st, 2);
	StackPush(&st, 3);
	StackPush(&st, 4);
	printf("%d ", StackTop(&st));
	StackPop(&st);
	printf("%d ", StackTop(&st));
	StackPop(&st);
	StackPush(&st, 5);
	StackPush(&st, 6);
	while (!StackEmpty(&st))
	{
		printf("%d ", StackTop(&st));
		StackPop(&st);
	}
	////  StackPush(&st, 1);
	////栈中元素：[1]

	////	StackPush(&st, 2);
	////栈中元素：[1, 2]

	////	StackPush(&st, 3);
	////栈中元素：[1, 2, 3]

	////	StackPush(&st, 4);
	////栈中元素：[1, 2, 3, 4]

	////	printf("%d ", StackTop(&st));
	////打印栈顶元素 4，栈中元素不变：[1, 2, 3, 4]

	////	StackPop(&st);
	////弹出栈顶元素 4，栈中元素：[1, 2, 3]

	////	printf("%d ", StackTop(&st));
	////打印栈顶元素 3，栈中元素不变：[1, 2, 3]

	////	StackPop(&st);
	////弹出栈顶元素 3，栈中元素：[1, 2]

	////	StackPush(&st, 5);
	////栈中元素：[1, 2, 5]

	////	StackPush(&st, 6);
	////栈中元素：[1, 2, 5, 6]

	////	while (!StackEmpty(&st)) { printf("%d ", StackTop(&st)); StackPop(&st); }
	////这个循环会依次打印并弹出栈顶元素：
	////	打印 6，弹出 6，栈中元素：[1, 2, 5]
	////	打印 5，弹出 5，栈中元素：[1, 2]
	////	打印 2，弹出 2，栈中元素：[1]
	////	打印 1，弹出 1，栈中元素：[]

	////	所以，最终的输出是 4 3 6 5 2 1。
	//printf("%d", StackTop(&st));//不能这样用
	StackDestroy(&st);
	return 0;
}
